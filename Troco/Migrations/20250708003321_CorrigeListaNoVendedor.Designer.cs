// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OTroco.TrocoContext;

#nullable disable

namespace Troco.Migrations
{
    [DbContext(typeof(TrocoDBContext))]
    [Migration("20250708003321_CorrigeListaNoVendedor")]
    partial class CorrigeListaNoVendedor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OTroco.TrocoContext.Categoria", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("OTroco.TrocoContext.Comanda", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Abertura")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Fechamento")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Comandas");
                });

            modelBuilder.Entity("OTroco.TrocoContext.Lancamento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Lancamentos");
                });

            modelBuilder.Entity("OTroco.TrocoContext.Produto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CategoriaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Preco")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("OTroco.TrocoContext.SubComanda", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ComandaId")
                        .HasColumnType("bigint");

                    b.Property<long>("LancamentoId")
                        .HasColumnType("bigint");

                    b.Property<long>("VendedorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComandaId");

                    b.HasIndex("LancamentoId");

                    b.HasIndex("VendedorId");

                    b.ToTable("SubComandas");
                });

            modelBuilder.Entity("OTroco.TrocoContext.Troca", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ProdutoAntigoId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProdutoNovoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubComandaId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoAntigoId");

                    b.HasIndex("ProdutoNovoId");

                    b.HasIndex("SubComandaId");

                    b.ToTable("Trocas");
                });

            modelBuilder.Entity("OTroco.TrocoContext.Vendedor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Comissao")
                        .HasColumnType("numeric");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Vendedores");
                });

            modelBuilder.Entity("Troco.TrocoContext.ProdutoVendedor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ProdutoId")
                        .HasColumnType("bigint");

                    b.Property<long>("VendedorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("VendedorId");

                    b.ToTable("ProdutoVendedor");
                });

            modelBuilder.Entity("OTroco.TrocoContext.Produto", b =>
                {
                    b.HasOne("OTroco.TrocoContext.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("OTroco.TrocoContext.SubComanda", b =>
                {
                    b.HasOne("OTroco.TrocoContext.Comanda", null)
                        .WithMany("SubComandas")
                        .HasForeignKey("ComandaId");

                    b.HasOne("OTroco.TrocoContext.Lancamento", "Lancamento")
                        .WithMany()
                        .HasForeignKey("LancamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OTroco.TrocoContext.Vendedor", "Vendedor")
                        .WithMany()
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lancamento");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("OTroco.TrocoContext.Troca", b =>
                {
                    b.HasOne("OTroco.TrocoContext.Produto", "ProdutoAntigo")
                        .WithMany()
                        .HasForeignKey("ProdutoAntigoId");

                    b.HasOne("OTroco.TrocoContext.Produto", "ProdutoNovo")
                        .WithMany()
                        .HasForeignKey("ProdutoNovoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OTroco.TrocoContext.SubComanda", null)
                        .WithMany("Trocas")
                        .HasForeignKey("SubComandaId");

                    b.Navigation("ProdutoAntigo");

                    b.Navigation("ProdutoNovo");
                });

            modelBuilder.Entity("Troco.TrocoContext.ProdutoVendedor", b =>
                {
                    b.HasOne("OTroco.TrocoContext.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OTroco.TrocoContext.Vendedor", "Vendedor")
                        .WithMany("ProdutosComissionados")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("OTroco.TrocoContext.Comanda", b =>
                {
                    b.Navigation("SubComandas");
                });

            modelBuilder.Entity("OTroco.TrocoContext.SubComanda", b =>
                {
                    b.Navigation("Trocas");
                });

            modelBuilder.Entity("OTroco.TrocoContext.Vendedor", b =>
                {
                    b.Navigation("ProdutosComissionados");
                });
#pragma warning restore 612, 618
        }
    }
}
